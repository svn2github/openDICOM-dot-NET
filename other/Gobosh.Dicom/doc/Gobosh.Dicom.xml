<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bin/Gobosh.Dicom</name>
    </assembly>
    <members>
        <member name="T:Gobosh.StringEncoding">
            <summary>
            Encodings is the base class for the different DICOM Encodings.
            They support encoding and decoding to utf16, the native .NET
            string format.
            </summary>
            <remarks>You need to override FromUTF16() and ToUTF16() to create a new encoding</remarks>
        </member>
        <member name="M:Gobosh.StringEncoding.GetEncodingFromEncodingString(System.String)">
            <summary>
            Returns an Encoding Class Reference from System.Text.Encoding by translating
            the DICOM Character Set to the Registration Strings. The DICOM strings are
            defined in PS3.3-2006, Page 816, Table C.12-2
            The code strings for the Encoding object can be found here:
            http://msdn2.microsoft.com/de-de/library/system.text.encoding.aspx
            </summary>
            <param name="announcedEncoding">DICOM string for encoding</param>
            <returns>An Encoding Class</returns>
        </member>
        <member name="T:Gobosh.ISO_8859_Base">
            <summary>
            base class for ISO_8859_x encodings with a single matching table
            Descendands only need to supply their own mapping array
            </summary>
        </member>
        <member name="F:Gobosh.ISO_8859_Base.CurrentRecodingTable">
            <summary>
            The reverse map of CurrentEncodingTable. Since we have
            UTF16/Unicode characters but only 256 (or less)
            target cells. To save Memory a Hashtable is used.
            The Hashtable is created by the CreateHashtable()
            function. Call it in your constructor
            </summary>
        </member>
        <member name="M:Gobosh.ISO_8859_Base.CreateHashtable">
            <summary>
            Protected function to create the reverse hash table of the Encoding table.
            Key of the Hashtable is the Unicode character value,
            Value is the 8bit character value from the Encoding table.
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.Document">
            <summary>
            DICOM.Document allows the management of any stream concerning
            the reading and writing of such a DICOM stream as well as
            transitions of Data Dictionaries or Transfer Syntaxes.
            The Document holds a root element with all Data Elements
            in the Stream.
            Usage:
            There are several ways to use it:
            1) Create the document directly from a existing stream, that
            supports EOF. In this case the Document(stream*) constructor
            shall be used.
            2) Create the document from an partial stream (like TCP). In
            this case the standard constructor shall be used and the
            data shall be pushed by using the trio
            PrepareToLoad()
            PartialLoad()
            FinishLoad()
            3) Alternativly the document can be created and kept as a
            reference all the time. In this case the LoadFromFile/SaveToFile
            functions shall be used.
            To export things to a file or a stream, the document can be
            configured and saved to a stream or file.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.Document.#ctor(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Constructs a document from a stream, inIsAFileSet allows
            to set the parser state
            </summary>
            <param name="inStream">a source stream</param>
            <param name="inIsAFileSet">flag true if stream is a file set</param>
        </member>
        <member name="F:Gobosh.DICOM.Document.DocumentMaxTempMemory">
            <summary>
            The maximum size of the internal stream transferbuffer
            Adjust this to reduce the memory footprint of this object
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Document.ActiveDataDictionaryName">
            <summary>
            The name of the current DataDictionary
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Document.ActiveDataDictionary">
            <summary>
            The current DataDictionary object
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Document.DicomStreamParser">
            <summary>
            the parser class instance
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Document.IsPartialLoading">
            <summary>
            true, when partial loading is active
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Document.RootNode">
            <summary>
            The Rootnode of the loaded document
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.Document.GetTransferSyntaxFlags(System.Boolean@,System.Boolean@)">
            <summary>
            Returns the Transfer Syntax Flags for a given (0002,0010) Tag.
            The object must already exist in the object tree.
            </summary>
            <param name="isLittleEndian">reference to a bool variable that contains the endianess after the call</param>
            <param name="isImplicit">reference to a bool variable that contains the implicity after the call</param>
        </member>
        <member name="M:Gobosh.DICOM.Document.SetDataDictionary(System.String)">
            <summary>
            Changes the Data Dictionary if neccessary
            </summary>
            <param name="inDataDictionaryFilename">
            </param>
        </member>
        <member name="M:Gobosh.DICOM.Document.GetDataDictionary">
            <summary>
            Returns the current Data Dictionary object
            </summary>
            <returns>Reference to the DataDictionary object</returns>
            <remarks>can return a null reference when no document is loaded!</remarks>
        </member>
        <member name="M:Gobosh.DICOM.Document.GetRootNode">
            <summary>
            Returns the root node of the loaded document
            </summary>
            <returns>Reference to the root node</returns>
        </member>
        <member name="M:Gobosh.DICOM.Document.LoadFromFile(System.String)">
            <summary>
            Loads a Document from a file. The data dictionary name must be set before
            </summary>
            <param name="inFileName">The full path and filename of the dicom file</param>
            <exception cref="T:System.Exception">Thrown when the data dictionary is been set</exception>
        </member>
        <member name="M:Gobosh.DICOM.Document.LoadFromStream(System.IO.Stream,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reads inStream until EOF and
            creates a document from it. It uses a temporary buffer
            to load the file and pass it to the parser.
            </summary>
            <param name="inStream">The stream to read from</param>
            <param name="inDataDictionary">the name of the data dictionary to be used</param>
            <param name="inUsePreamble">true if preamble and DICM shall be searched</param>
            <param name="inExpectImplicit">true if implicit transfer syntax shall be expected</param>
            <param name="inExpectLittleEndian">true if little endian transfer syntax shall be expected</param>
            <exception cref="T:System.Exception">throws when stream is not readable or contains a DICOM syntax violation</exception>
        </member>
        <member name="M:Gobosh.DICOM.Document.PrepareToLoad(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prepares the partial loading and creates internal structures for calls to PartialLoad().
            The (clean) RootNode is available from this point on, so the programmer can access
            the partially loaded document stream, if neccessary
            </summary>
            <param name="inDataDictionary">
            </param>
            <param name="inUsePreamble">
            </param>
            <param name="inExpectImplicit">
            </param>
            <param name="inExpectLittleEndian">
            </param>
        </member>
        <member name="M:Gobosh.DICOM.Document.PartialLoad(System.Byte[],System.Int64)">
            <summary>
            Partially reads a byte[] buffer and passes it to the
            currently active DICOM binary parser.
            </summary>
            <param name="buffer">reference to the buffer</param>
            <param name="size">the amount of valid data</param>
            <returns>true, if the document *could be* complete (see documentation)</returns>
        </member>
        <member name="M:Gobosh.DICOM.Document.FinishLoad">
            <summary>
            Finishes the partial loading. This resets the internal states
            back and validates the RootNode object.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.Document.LoadFromLbDicomXML(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Loads the document from an Lb.Dicom XML document. Since this XML
            variant does not contain any structural nodes all scanned nodes are
            attached to the rootnode except items, which get a SQ element in
            presequence.
            </summary>
            <param name="inDocument">reference to a XML document</param>
        </member>
        <member name="M:Gobosh.DICOM.Document.CreateNodeByLbDicomXMLVR(System.Xml.XmlNode,Gobosh.StringEncoding,System.Globalization.CultureInfo,System.String)">
            <summary>
            Create a DataElement object by a given Lb.Dicom XML Node
            </summary>
            <param name="inDataelement">the XML node containing the Data Element</param>
            <param name="currentEncoding">the current encoding, usually ISO8859_1 since Lb.Dicom does not support anything else</param>
            <param name="myCulture">the culture the Lb.Dicom file was written in</param>
            <param name="path">the path to the extracted binary block files</param>
            <returns>a reference to a new DataElement block containing the values</returns>
        </member>
        <member name="M:Gobosh.DICOM.Document.SaveDocument(System.IO.Stream,System.Boolean)">
            <summary>
            Saves a document (using the ExplicitVR/LittleEndian Transfersyntax)
            </summary>
            <param name="stream">reference to an output stream</param>
            <param name="usePreamble">true if the preamble shall be written (recommended for files)</param>
        </member>
        <member name="M:Gobosh.DICOM.Document.SetTransferSyntax(Gobosh.DICOM.DataDictionary,System.Boolean,System.Boolean)">
            <summary>
            Sets the transfer syntax for the document. Creates or replaces the
            (0002,0010) Group Element, if present.
            (NOT IMPLEMENTED YET)
            </summary>
            <param name="dictionary">the Dictionary to use</param>
            <param name="useExplicit">Set true for Explicit Value Representation (Recommended)</param>
            <param name="useLittleEndian">Set true for little Endian encoding (Recommended)</param>
        </member>
        <member name="M:Gobosh.DICOM.Document.PrepareDataElements(Gobosh.DICOM.DataElement,System.Boolean,System.Boolean)">
            <summary>
            Prepares the data elements for binary write. This includes
            the correction of any group lengths, any transfer syntax specific
            things as well as block hints like (0004,1400).
            </summary>
            <param name="rootElement">
            </param>
            <exception cref="!:">thrown when something is wrong</exception>
        </member>
        <member name="M:Gobosh.DICOM.Document.CreateDataElementByVR(System.Int32,System.Int32,System.Int32,Gobosh.StringEncoding)">
            <summary>
            Create an appropriate DataElement object depending on the VR.
            </summary>
            <param name="valueRepresentation">The VR as int constant</param>
            <param name="group">The Group Tag</param>
            <param name="element">The Element Tag</param>
            <param name="encoding">The Encoding that shall be used</param>
            <returns>A reference to a new DataElement object</returns>
        </member>
        <member name="T:Gobosh.DICOM.ValueRepresentationConsts">
            <summary>
            Contains constants for faster comparison to VR codes
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataDictionaryEntry">
            <summary>
            Describes an DataDictionaryEntry
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataDictionary">
            <summary>
            DataDictionary holds a complete DataDictionary from an XML file
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataDictionary.ElementsByGroup">
            <summary>
            ElementsByGroup is a Hashtable, which key is "groupnumber" and value
            another Hashtable, which key is "elementnumber" and value is the
            DataElement description object
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataDictionary.FileName">
            <summary>
            The filename of the loaded datadictionary
            </summary>
        </member>
        <member name="P:Gobosh.DICOM.DataDictionary.Name">
            <summary>
            The Name of the loaded Dictionary
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataDictionary.CreateStructures(System.Xml.XmlDocument)">
            <summary>
            Reads the XML DOM and builds lookup structures for the Data Dictionary
            </summary>
            <param name="document">A reference to an XmlDocument object.</param>
        </member>
        <member name="F:Gobosh.DICOM.DataElements.DataElementStringType.AllowMultiValue">
            <summary>
            defines if the DataElement allows multiple values.
            If false, the 0x5C ("\") is not used to split the values
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElements.DataElementStringType.MaxLengthOfValue">
            <summary>
            defines the maximum length of a single value
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElements.DataElementStringType.padWithBlank">
            <summary>
            defines if the value shall be padded by 0x20, otherwise
            the value shall be padded with 0x00.
            </summary>
            <remarks>Everything but the UI VR is being padded with blanks, UI shall
            be padded with 0x00 (see PS3.5, Table 6.2.1, page 30)</remarks>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.DataElementStringType.CreateValueElement(System.String)">
            <summary>
            A overridable factory function to create the appropriate Value
            Element objects.
            </summary>
            <param name="Value">A string representing the value</param>
            <returns>an Value Element object</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.DataElementStringType.CreateValueElement">
            <summary>
            An overridable factory function to create the appropriate
            Value Element object used as Value in this DataElement.
            Use this function to create an default Value object and
            access the properties to change it.
            </summary>
            <returns>A default Value Element object</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.DataElementStringType.Decode(System.Boolean)">
            <summary>
            Decodes the RawData buffer using the given endianess
            </summary>
            <param name="isLittleEndian">flag if data is little endian</param>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.AE">
            <summary>
            AE (Application Entity) Data Element Object
            Contains the name of the last application
            that modified the DataSet.
            Definition ( PS3.5-2006, Page 25, Table 6.2-1 )
            A string of characters that identifies an
            Application Entity with leading and trailing
            spaces (20H) being non-significant. A value
            consisting solely of spaces shall not be used.
            Character Repertoire
            Default Character Repertoire excluding character
            code 5CH (the BACKSLASH \ in ISO-IR 6), and
            control characters LF, FF, CR and ESC.
            Length of Value
            16 bytes maximum
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.AS">
            <summary>
            AS (Age String) Data Element Object
            Contains the age of a person (Patient)
            Definition ( PS3.5-2006, Page 25, Table 6.2-1)
            A string of characters with one of the following
            formats -- nnnD, nnnW, nnnM, nnnY; where
            nnn shall contain the number of days for D,
            weeks for W, months for M, or years for Y.
            Example: 018M would represent an age of
            18 months.
            Character Repertoire
            0-9, D, W,
            M, Y of Default
            Character
            Repertoire
            Length of Value
            4 bytes fixed
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.AS.CreateValueElement(System.String)">
            <summary>
            An overridable factory function to create the appropriate
            Value Element object used as Value in this DataElement.
            </summary>
            <returns>A default Value Element object</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.AS.CreateValueElement">
            <summary>
            An overridable factory function to create the appropriate
            Value Element object used as Value in this DataElement.
            Use this function to create an default Value object and
            access the properties to change it.
            </summary>
            <returns>A default Value Element object</returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.AT">
            <summary>
            AT (Attribute Tag) Data Element Object
            		Seems to be used to point to certain
            Definition ( PS3.5-2006, Page 25, Table 6.2-1)
            		Ordered pair of 16-bit unsigned integers that is
            		the value of a Data Element Tag.
            		Example: A Data Element Tag of (0018,00FF)
            		would be encoded as a series of 4 bytes in a
            		Little-Endian Transfer Syntax as
            		18H,00H,FFH,00H and in a Big-Endian
            		Transfer Syntax as 00H,18H,00H,FFH.
            		Note: The encoding of an AT value is exactly
            		the same as the encoding of a Data
            		Element Tag as defined in Section 7.
            Character Repertoire
            		not applicable
            Length of Value
            		4 bytes fixed (multiple VMs possible)
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.AT.Decode(System.Boolean)">
            <summary>
            Decodes 4 byte group/number attributes
            </summary>
            <param name="isLittleEndian">true if data is little endian encoded</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.AT.PrepareRawBuffer">
            <summary>
            encodes the raw buffer for AT values
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.AT.CreateValueElement">
            <summary>
            An overridable factory function to create the appropriate
            Value Element object used as Value in this DataElement.
            Use this function to create an default Value object and
            access the properties to change it.
            </summary>
            <returns>A default Value Element object</returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.CS">
            <summary>
            CS (Code String) Data Element Object
            		a short code string used for types
            		and identifiers
            Definition ( PS3.5-2006, Page 25, Table 6.2-1)
            		A string of characters with leading or trailing
            		spaces (20H) being non-significant.
            Character Repertoire
            		Uppercase characters, 0-9, the SPACE
            		character, and underscore _, of the
            		Default Character Repertoire
            Length of Value
            		16 bytes maximum
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.DA">
            <summary>
            DA (Date) Data Element Object
            Definition ( PS3.5-2006, Page 25, Table 6.2-1)
            A string of characters of the format yyyymmdd;
            where yyyy shall contain year, mm shall contain the month,
            and dd shall contain the day. This conforms to
            the ANSI HISPP MSDS Date common data type.
            Example:
            19930822 would represent August 22, 1993.
            Notes: 1. For reasons of backward compatibility with
            versions of this standard prior to V3.0, it is recommended
            that implementations also support a string of characters of
            the format yyyy.mm.dd for this VR.
            Character Repertoire
            0-9 of Default Character Repertoire
            Note: For reasons specified in the previous column,
            implementations may wish to support the . character
            as well.
            Length of Value
            8 bytes fixed (10bytes fixed if old ACR/NEMA format)
            Note: For reasons specified in the previous columns,
            implementations may also wish to support a 10 byte
            fixed length as well.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.DA.Decode(System.Boolean)">
            <summary>
            Decodes the RawData buffer using the given endianess
            </summary>
            <param name="isLittleEndian">flag if data is little endian</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.DA.PrepareRawBuffer">
            <summary>
            Writes all DA values to the raw data encoding and
            set ValueLength member.
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.DS">
            <summary>
            DS (Decimal String) Data Element Object
            Definition ( PS3.5-2006, Page 26, Table 6.2-1)
            		A string of characters representing either a
            		fixed point number or a floating point number.
            		A fixed point number shall contain only the
            		characters 0-9 with an optional leading "+" or
            		"-" and an optional "." to mark the decimal
            		point. A floating point number shall be
            		conveyed as defined in ANSI X3.9, with an "E"
            		or "e" to indicate the start of the exponent.
            		Decimal Strings may be padded with leading
            		or trailing spaces. Embedded spaces are not
            		allowed.
            		Note: Data Elements with multiple values
            		using this VR may not be properly
            		encoded if Explicit-VR transfer syntax is
            		used and the VL of this attribute
            		exceeds 65534 bytes
            Character Repertoire
            0-9, +, -, E, e, ." of
            Default Character Repertoire
            Length of Value
            		16 bytes maximum
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.DS.CreateValueElement(System.String)">
            <summary>
            A overridable factory function to create the appropriate Value
            Element objects.
            </summary>
            <param name="Value">A string representing the value</param>
            <returns>an Value Element object</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.DS.CreateValueElement">
            <summary>
            An overridable factory function to create the appropriate
            Value Element object used as Value in this DataElement.
            Use this function to create an default Value object and
            access the properties to change it.
            </summary>
            <returns>A default Value Element object</returns>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:Gobosh.DICOM.DataElements.DT-->
        <member name="T:Gobosh.DICOM.DataElements.FL">
            <summary>
            FL (Floating Point Single) Data Element Object
            Definition ( PS3.5-2006, Page 26, Table 6.2-1)
            Single precision binary floating point number
            represented in IEEE 754:1985 32-bit Floating
            Point Number Format
            Character Repertoire
            not applicable
            Value of Length
            4 bytes fixed
            </summary>
            <remarks>The internal float format of C# is compliant to IEEE 754:1985 standard. Tough Luck.</remarks>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.FD">
            <summary>
            FD (Floating Point Double) Data Element Object
            Definition ( PS3.5-2006, Page 26, Table 6.2-1)
            Double precision binary floating point number
            represented in IEEE 754:1985 64-bit Floating
            Point Number Format
            Character Repertoire
            not applicable
            Value of Length
            8 bytes fixed
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.IS">
            <summary>
            A string of characters representing an Integer
            in base-10 (decimal), shall contain only the
            characters 0 - 9, with an optional leading "+" or
            "-". It may be padded with leading and/or
            trailing spaces. Embedded spaces are not
            allowed.
            The integer, n, represented shall be in the
            range:
            -2^31 lt n lt (2^31 - 1).
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.IS.CreateValueElement(System.String)">
            <summary>
            Creates a Value element, if a value is present!
            An IS element can also be empty which results in NO value.
            </summary>
            <param name="Value">An DataElementIntegerValue object or null, if input string is empty.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.LO">
            <summary>
            Definition:
            A character string that may be padded with
            leading and/or trailing spaces. The character
            code 5CH (the BACKSLASH \ in ISO-IR 6)
            shall not be present, as it is used as the
            delimiter between values in multiple valued
            data elements. The string shall not have
            Control Characters except for ESC.
            Encoding
            Default Character Repertoire and/or
            as defined by (0008,0005).
            64 characters maximum
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.LT">
            <summary>
            A character string that may contain one or
            more paragraphs. It may contain the Graphic
            Character set and the Control Characters, CR,
            LF, FF, and ESC. It may be padded with
            trailing spaces, which may be ignored, but
            leading spaces are considered to be
            significant. Data Elements with this VR shall
            not be multi-valued and therefore character
            code 5CH (the BACKSLASH \ in ISO-IR 6)
            may be used.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.OB.GetHumanReadableString">
            <summary>
            Returns a string that shows the content of the DataElement in
            an human readable manner.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.OF.GetHumanReadableString">
            <summary>
            Returns a string that shows the content of the DataElement in
            an human readable manner.
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.OW.GetHumanReadableString">
            <summary>
            Returns a string that shows the content of the DataElement in
            an human readable manner.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.PN">
            <summary>
            A character string encoded using a 5
            component convention. The character code
            5CH (the BACKSLASH \ in ISO-IR 6) shall
            not be present, as it is used as the delimiter
            between values in multiple valued data
            elements. The string may be padded with
            trailing spaces. The five components in their
            order of occurrence are: family name complex,
            given name complex, middle name, name
            prefix, name suffix. Any of the five components
            may be an empty string. The component
            delimiter shall be the caret ^ character (5EH).
            Delimiters are required for interior null
            components. Trailing null components and
            their delimiters may be omitted. Multiple
            entries are permitted in each component and
            are encoded as natural text strings, in the
            format preferred by the named person. This
            conforms to the ANSI HISPP MSDS Person
            Name common data type.
            [...]
            Precise semantics are defined for each
            component group. See section 6.2.1.
            Examples:
            Rev. John Robert Quincy Adams, B.A.
            M.Div.
            Adams^John Robert
            Quincy^^Rev.^B.A. M.Div.
            [One family name; three given names;
            no middle name; one prefix; two
            suffixes.]
            Susan Morrison-Jones, Ph.D., Chief
            Executive Officer
            Morrison-Jones^Susan^^^Ph.D., Chief
            Executive Officer
            [Two family names; one given name; no
            middle name; no prefix; two suffixes.]
            John Doe
            Doe^John
            [One family name; one given name; no
            middle name, prefix, or suffix. Delimiters
            have been omitted for the three trailing
            null components.]
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.PN.CreateValueElement(System.String)">
            <summary>
            A overridable factory function to create the appropriate Value
            Element objects.
            </summary>
            <param name="Value">A string representing the value</param>
            <returns>an Value Element object</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.PN.CreateValueElement">
            <summary>
            A overridable factory function to create the appropriate Value
            Element objects.
            </summary>
            <returns>an default Value Element object</returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.SH">
            <summary>
            SH Short String
            contains a short string (max 16 bytes)
            Definition ( PS3.5-2006, Page 25, Table 6.2-1 )
            A character string that may be padded with
            leading and/or trailing spaces. The character
            code 05CH (the BACKSLASH \ in ISO-IR 6)
            shall not be present, as it is used as the
            delimiter between values for multiple data
            elements. The string shall not have Control
            Characters except ESC.
            Default Character Repertoire:
            Default Character Repertoire and/or
            as defined by (0008,0005).
            16 chars maximum (see NOTE in 6.2)
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.SL">
            <summary>
            Signed binary integer 32 bits long in 2's
            complement form.
            Represents an integer, n, in the range:
            - 2^31 le n le (2^31 - 1).
            Character Set:
            not applicable
            Length:
            4 bytes fixed
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.SQ.GetHumanReadableString">
            <summary>
            Returns a string that shows the content of the DataElement in
            an human readable manner.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.SS">
            <summary>
            Signed Short Data Element
            Signed binary integer 16 bits long in 2's
            complement form. Represents an integer n in
            the range:
            -215 le n le (215 - 1).
            CharacterSet:
            not applicable
            Length
            2 bytes fixed
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.TM">
            <summary>
            A string of characters of the format
            hhmmss.frac; where hh contains hours (range
            "00" - "23"), mm contains minutes (range "00" -
            "59"), ss contains seconds (range "00" -
            "59"), and frac contains a fractional part of a
            second as small as 1 millionth of a second
            (range 000000 - 999999). A 24 hour clock
            is assumed. Midnight can be represented by
            only 0000 since 2400 would violate the
            hour range. The string may be padded with
            trailing spaces. Leading and embedded
            spaces are not allowed. One or more of the
            components mm, ss, or frac may be
            unspecified as long as every component to the
            right of an unspecified component is also
            unspecified. If frac is unspecified the
            preceding . may not be included. Frac shall
            be held to six decimal places or less to ensure
            its format conforms to the ANSI HISPP MSDS
            Time common data type.
            Examples:
            1. 070907.0705  represents a time of
            7 hours, 9 minutes and 7.0705
            seconds.
            2. 1010 represents a time of 10 hours,
            and 10 minutes.
            3. 021  is an invalid value.
            Notes: 1. For reasons of backward
            compatibility with versions of this
            standard prior to V3.0, it is
            recommended that implementations
            also support a string of characters of
            the format hh:mm:ss.frac for this VR.
            2. See also DT VR in this table.
            Character Set Repertoire:
            "0-9, ." of Default Character Repertoire
            16 Bytes maximum
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.TM.#ctor(Gobosh.DICOM.DataDictionary,System.Int32,System.Int32,Gobosh.StringEncoding,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TM Data Element Constructor. Use it when creating it from base values
            </summary>
            <param name="dataDictionary">The Data Dictionary that should be used to encode the string (can be null)</param>
            <param name="groupTag">The group tag of the element</param>
            <param name="elementTag">The element tag of the element</param>
            <param name="encodingUsed">The encoding that should be used</param>
            <param name="isLittleEndian">Shall the Element be encoded in little endianess</param>
            <param name="hour">The hour of the time data</param>
            <param name="minutes">The minute of the time data</param>
            <param name="seconds">The seconds of the time data</param>
            <param name="microseconds">The microseconds fraction of the time data</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.TM.#ctor(Gobosh.DICOM.DataDictionary,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],Gobosh.StringEncoding,System.Boolean)">
            <summary>
            TM Data Element Constructor. Use this constructor to initialize it from a raw buffer.
            </summary>
            <param name="dataDictionary">
            </param>
            <param name="groupTag">
            </param>
            <param name="elementTag">
            </param>
            <param name="valueRepresentation">
            </param>
            <param name="valueLength">
            </param>
            <param name="rawBuffer">
            </param>
            <param name="encodingUsed">
            </param>
            <param name="isLittleEndian">
            </param>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.TM.PrepareRawBuffer">
            <summary>
            Converts the member variables to a string
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.TM.Decode(System.Boolean)">
            <summary>
            Decodes the RawData buffer using the given endianess
            </summary>
            <param name="isLittleEndian">flag if data is little endian</param>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.UI">
            <summary>
            Unique Identifier (UID)
            Contains an ISO identifier string that
            allows to announce transfer syntax encodings
            Definition ( PS3.5-2006, Page 30, Table 6.2-1 )
            A character string containing a UID that is
            used to uniquely identify a wide variety of
            items. The UID is a series of numeric
            components separated by the period "."
            character. If a Value Field containing one or
            more UIDs is an odd number of bytes in
            length, the Value Field shall be padded with a
            single trailing NULL (00H) character to ensure
            that the Value Field is an even number of
            bytes in length. See Section 9 and Annex B
            for a complete specification and examples.
            Character Set Repertoire
            "0-9, ." of Default Character Repertoire
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.UN.GetHumanReadableString">
            <summary>
            Returns a string that shows the content of the DataElement in
            an human readable manner.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.US">
            <summary>
            Definition:
            Unsigned binary integer 16 bits long.
            Represents integer n in the range
            0 le n le 2^16-1
            Character Repertoire:
            not applicable
            2 bytes fixed
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.US.Decode(System.Boolean)">
            <summary>
            Decodes the RawData buffer using the given endianess.
            </summary>
            <param name="isLittleEndian">flag if data is little endian</param>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.UT">
            <summary>
            Unlimited Text Data element
            A character string that may contain one or more paragraphs.
            It may contain the graphic character set and the control
            characters, CR, LF, FF and ESC. It may be padded with
            trailing spaces, which may be ignored, but leading spaces
            are considered to be significant.
            Data Elements with this VR shall not be multi-valued and
            therefore Character Code 5CH (the BACKSLASH "\" in ISO_IR6)
            may be used.
            maximum size: 2^32-2 (0xffffffff is reserved)
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElements.Root">
            <summary>
            This class is used to be the root node of the outmost DataSet frame in the DICOM stream
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.Root.GetHumanReadableString">
            <summary>
            Returns a string that shows the content of the DataElement in
            an human readable manner.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElements.Other.GetHumanReadableString">
            <summary>
            Returns a string that shows the content of the DataElement in
            an human readable manner.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Gobosh.DICOM.Writer">
            <summary>
            Summary description for dicomwriter.
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Writer.kMetaGroupNumber">
            <summary>
            a const for the META groupnumber, used for readability
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.Writer.WriteToStream(Gobosh.DICOM.DataElement,System.IO.Stream,System.Boolean)">
            <summary>
            Writes an element and subelements to output stream
            </summary>
            <param name="rootElement">the root element to write</param>
            <param name="targetStream">the target stream</param>
            <param name="usePreamble">if an preamble should be written (true for files)</param>
            <returns>true for successful writing</returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElementValue">
            <summary>
            base class for data element values
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementValue.ValueType">
            <summary>
            Basetype Compatibility
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementValue.Properties">
            <summary>
            A Hashtable of VarProperty objects for this value
            </summary>
            <remarks>A Hashtable is used instead of Dictionary since compatibility with .NET 1.1 shall be achieved</remarks>
        </member>
        <member name="M:Gobosh.DICOM.DataElementValue.ClearProperties(System.Int32)">
            <summary>
            Clear the property table and rebuild it.
            </summary>
            <param name="capacity">Capacity to be reserved on creation</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElementValue.AddProperty(Gobosh.DICOM.VarProperty)">
            <summary>
            Adds a VarProperty object to the list of properties
            </summary>
            <param name="newProperty">The VarProperty object to be added</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElementValue.GetProperty(System.String)">
            <summary>
            Get the property object by name
            </summary>
            <param name="name">the name of the property</param>
            <returns>a VarProperty object or null if not existent</returns>
        </member>
        <member name="T:Gobosh.DICOM.DataElementIntegerValue">
            <summary>
            An Integer Value for data elements
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElementDoubleValue">
            <summary>
            A property representing a 64bit double precision floating point number.
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElementStringValue">
            <summary>
            An Integer Value for data elements
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElementAgeStringValue.#ctor(System.String)">
            <summary>
            Creates a new DataElementAgeStringValue object and sets its
            value according to the given valuestring. The format for the
            string is 000N, where 000 is a three-digit-number and N
            is a specifier with valid values of "D","W","M","Y"
            </summary>
            <param name="Value">The age description as 000N</param>
        </member>
        <member name="F:Gobosh.DICOM.DataElementDAValue.Months">
            <summary>
            A static string array for converting the month number
            to a string.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElementDAValue.SetValueFromString(System.String)">
            <summary>
            Set the current value by an encoded string of the date.
            </summary>
            <param name="dateString">A date as string in yyyymmdd notation</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElementDAValue.GetValueAsString">
            <summary>
            Returns the date as human readable string.
            Formatting is "dd mmm yyyy", the common invariant culture
            </summary>
            <returns>a string in format dd mmm yyyy</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElementDAValue.WriteRawData(System.Byte[],System.Int32)">
            <summary>
            Writes the raw data representation of the current date
            </summary>
            <param name="buffer">the buffer where to write to</param>
            <param name="index">the index where to write to</param>
        </member>
        <member name="T:Gobosh.DICOM.DataElementPNValue">
            <summary>
            Represents one value of a PN (Person Name) DataElement.
            This Data Element type is used for patient names or
            performing physicians.
            The raw data contains a (up to) 5 components string.
            (see PS3.5-2006, table 6.2-1, page 27)
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElementPNValue.#ctor">
            <summary>
            Constructs a DataElementPNValue object. The namestring
            should have the format:
            "Adams^John Robert^Quincy^Rev.^B.A. M.Div=ideographic=phonetic"
            </summary>
            <param name="namestring">a 3 group, 5 component string</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElementPNValue.#ctor(System.String)">
            <summary>
            Constructs a DataElementPNValue object. The namestring
            should have the format:
            "Adams^John Robert^Quincy^Rev.^B.A. M.Div=ideographic=phonetic"
            </summary>
            <param name="namestring">a 3 group, 5 component string</param>
        </member>
        <member name="F:Gobosh.DICOM.DataElementPNValue.FamilyName">
            <summary>
            Represents the familyname of a person
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementPNValue.GivenName">
            <summary>
            Represents the given name of a person
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementPNValue.MiddleName">
            <summary>
            Represents the middle name or char of a person
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementPNValue.NamePrefix">
            <summary>
            Represents a name prefix, like "Reverend"
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementPNValue.NameSuffix">
            <summary>
            Represents a name suffix, like "Ph.D., Chief Execution Officer"
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementPNValue.Ideographic">
            <summary>
            Represents the ideographic group of the name
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementPNValue.Phonetic">
            <summary>
            Represents the phonetic group of the name
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElementDTValue.Months">
            <summary>
            A static string array for converting the month number
            to a string.
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.DataElementTMValue">
            <summary>
            A TM Valuetype
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElementTMValue.toRawString">
            <summary>
            returns the current encoding as string ready for the conversion
            to the raw buffer representation. The return value will be already
            padded to an even length.
            </summary>
            <returns>The encoded and to even length padded string</returns>
        </member>
        <member name="T:Gobosh.DICOM.VarProperty">
            <summary>
            VarProperty is a base class for properties of an DataElementValue
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.VarProperty.PropName">
            <summary>
            a string storing the name of the Property
            </summary>
        </member>
        <member name="P:Gobosh.DICOM.VarProperty.Name">
            <summary>
            a string property for the name
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.VarProperty.AsInteger">
            <summary>
            Returns the value as an integer
            </summary>
            <returns>Value as 32bit int</returns>
        </member>
        <member name="M:Gobosh.DICOM.VarProperty.AsFloat">
            <summary>
            Returns the value as a float
            </summary>
            <returns>Value as 32 bit float</returns>
        </member>
        <member name="M:Gobosh.DICOM.VarProperty.AsDouble">
            <summary>
            Returns the value as a double
            </summary>
            <returns>Value as 80 bit double</returns>
        </member>
        <member name="M:Gobosh.DICOM.VarProperty.AsString">
            <summary>
            Returns a true string representation as unicode stirng
            </summary>
            <returns>Unicode string of the value</returns>
        </member>
        <member name="M:Gobosh.DICOM.IntProperty.AsInteger">
            <summary>
            Returns the value as an integer
            </summary>
            <returns>Value as 32bit int</returns>
        </member>
        <member name="M:Gobosh.DICOM.IntProperty.AsFloat">
            <summary>
            Returns the value as a float
            </summary>
            <returns>Value as 32 bit float</returns>
        </member>
        <member name="M:Gobosh.DICOM.IntProperty.AsDouble">
            <summary>
            Returns the value as a double
            </summary>
            <returns>Value as 80 bit double</returns>
        </member>
        <member name="M:Gobosh.DICOM.IntProperty.AsString">
            <summary>
            Returns a true string representation as unicode stirng
            </summary>
            <returns>Unicode string of the value</returns>
        </member>
        <member name="M:Gobosh.DICOM.FloatProperty.AsInteger">
            <summary>
            Returns the value as an integer
            </summary>
            <returns>Value as 32bit int</returns>
        </member>
        <member name="M:Gobosh.DICOM.FloatProperty.AsFloat">
            <summary>
            Returns the value as a float
            </summary>
            <returns>Value as 32 bit float</returns>
        </member>
        <member name="M:Gobosh.DICOM.FloatProperty.AsDouble">
            <summary>
            Returns the value as a double
            </summary>
            <returns>Value as 80 bit double</returns>
        </member>
        <member name="M:Gobosh.DICOM.FloatProperty.AsString">
            <summary>
            Returns a true string representation as unicode stirng
            </summary>
            <returns>Unicode string of the value</returns>
        </member>
        <member name="M:Gobosh.DICOM.DoubleProperty.AsInteger">
            <summary>
            Returns the value as an integer
            </summary>
            <returns>Value as 32bit int</returns>
        </member>
        <member name="M:Gobosh.DICOM.DoubleProperty.AsFloat">
            <summary>
            Returns the value as a float
            </summary>
            <returns>Value as 32 bit float</returns>
        </member>
        <member name="M:Gobosh.DICOM.DoubleProperty.AsDouble">
            <summary>
            Returns the value as a double
            </summary>
            <returns>Value as 80 bit double</returns>
        </member>
        <member name="M:Gobosh.DICOM.DoubleProperty.AsString">
            <summary>
            Returns a true string representation as unicode stirng
            </summary>
            <returns>Unicode string of the value</returns>
        </member>
        <member name="M:Gobosh.DICOM.StringProperty.AsInteger">
            <summary>
            Returns the value as an integer
            </summary>
            <returns>Value as 32bit int</returns>
        </member>
        <member name="M:Gobosh.DICOM.StringProperty.AsFloat">
            <summary>
            Returns the value as a float
            </summary>
            <returns>Value as 32 bit float</returns>
        </member>
        <member name="M:Gobosh.DICOM.StringProperty.AsDouble">
            <summary>
            Returns the value as a double
            </summary>
            <returns>Value as 80 bit double</returns>
        </member>
        <member name="M:Gobosh.DICOM.StringProperty.AsString">
            <summary>
            Returns a true string representation as unicode stirng
            </summary>
            <returns>Unicode string of the value</returns>
        </member>
        <member name="T:Gobosh.DICOM.Reader">
            <summary>
            the dicom parser extracts the neccessary informations
            out of a DICOM stream to create a DICOM DataElement sequence..
            It is a multilevel parser that takes care of several syntactic and
            semantic rules regarding the DICOM standard.
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.Reader.SyntaxParserState">
            <summary>
            tParserState does reflect the state of the transfer syntax parser.
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.kStillReserveSize">
            <summary>
            the size of the intermediate buffer to store unparsed bytes
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.kMetaGroupNumber">
            <summary>
            a const for the META groupnumber, used for readability
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.parserState">
            <summary>
            reflects the state of the parser
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.bytesExpected">
            <summary>
            the number of bytes expected for the next complete element
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.expectedSequenceLength">
            <summary>
            the number of bytes are expected for the current sequence length
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.isStreamLittleEndian">
            <summary>
            the current endianess flag
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.isStreamImplicitVR">
            <summary>
            the flag if the stream is Implicit VR or Explicit VR
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.CurrentEncoding">
            <summary>
            the current encoding according to (0008,0005)
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.AnnouncedEncoding">
            <summary>
            the announced encoding, gets valid after the tag found
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.expectedGroup">
            <summary>
            the current group number
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.groupLengthNeeded">
            <summary>
            indicates that the current group expects a group length DataElement
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.expectedGroupLength">
            <summary>
            the number of bytes the expected for the current group
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.groupCompleteFlag">
            <summary>
            internal flag to show if a group is complete and the parser _could_ end.
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.bytesReadDataElement">
            <summary>
            the number of bytes being read from the current Data Element
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.bytesReadGroupLength">
            <summary>
            the number of bytes being read from the current group
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.nextGroupWillBeImplicitVR">
            <summary>
            stores the announced VR Transfersyntax, see (0002,0010)
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.nextGroupWillBeLittleEndian">
            <summary>
            stores the announced Endianess Transfersyntax, see (0002,0010)
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.stillReserve">
            <summary>
            the buffer remembering unparsed bytes
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.stillReserveLevel">
            <summary>
            how many bytes are in the stillReserve buffer
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.dataElementGroupNumber">
            <summary>
            group number of the current element
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.dataElementElementNumber">
            <summary>
            the element number of the current element
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.dataElementValueRepresentation">
            <summary>
            the value representation
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.dataElementVRAsDWord">
            <summary>
            the value representation as int ('UN' = 0x554E)
            the first byte is MSB, the second LSB of the lowest 16 bit
            of the int (32 bit)
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.dataElementValueLength">
            <summary>
            the value length
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.dataElementValueRead">
            <summary>
            the number of bytes alread read for VL
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.dataElementValueBuffer">
            <summary>
            the current raw data value buffer of an Data Element
            the parser will create this buffer as soon as the Value Length
            is determined and fills it. the createElement function will
            create an Element and passes the reference to the buffer.
            Deletetition is in responsibility of the Data Element Object
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.currentDictionary">
            <summary>
            the reference to the selected data dictionary
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.SequenceStack">
            <summary>
            the Sequence Stack, used by nested DataSets / Items
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.RootNode">
            <summary>
            The Root Node Data Element for the current Reader Stream
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.Reader.CurrentNode">
            <summary>
            The current node where new parsed elements are attached to
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.Reader.setParserState(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the Syntax Parser State to appropriate options.
            If the usage of the preamble is indicated, the endianess and explicity is
            being set according to Part 10 (Filesets) otherwise the parser expects the
            DICOM stream to begin with a Group Tag.
            </summary>
            <param name="inUsePreamble">Should the parser expect a preamble and DICM signature</param>
            <param name="inExpectImplicit">Is the stream is implicit VR? (ignored if inUsePreamble is true)</param>
            <param name="inExpectLittleEndian">Is the stream little endian encoded? (ignored if inUsePreamble is true)</param>
        </member>
        <member name="M:Gobosh.DICOM.Reader.parse(System.Byte[],System.Int64)">
            <summary>
            Parses buffer[] completely. If there are unparsed bytes left
            this function will keep it in our silentReserve unil the parser
            can be fed again with it.
            </summary>
            <param name="buffer">A reference to byte array</param>
            <param name="size">The total number of bytes in buffer[]</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Gobosh.DICOM.Reader.setSyntaxState(Gobosh.DICOM.Reader.SyntaxParserState,System.Int64)">
            <summary>
            sets the state of the syntax parser
            </summary>
            <param name="newState">the new state of the statemachine</param>
            <param name="bytesExpectedForNextElement">the number of bytes that must be received for the next syntactical element</param>
        </member>
        <member name="M:Gobosh.DICOM.Reader.parse(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Parses buffer[] from index up to size-1
            </summary>
            <param name="buffer">A reference to byte array</param>
            <param name="index">The index from where to parse</param>
            <param name="size">The total number of bytes in buffer[]</param>
            <returns>returns the number of bytes that left unparsed</returns>
        </member>
        <member name="M:Gobosh.DICOM.Reader.pushSequenceStack">
            <summary>
            creates a new Element on the Sequence stack
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.Reader.popSequenceStack">
            <summary>
            removes the last Element on the Sequence stack
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.Reader.Complete">
            <summary>
            Checks if a stream is an acceptance situation. Usually a DICOM stream
            shall end with an empty sequence stack and parser state shall be
            (explicit or implicit) reading a group number of the tag.
            The state of the parser will not be modified.
            </summary>
            <returns>Returns true if the parser is in acceptance situation</returns>
        </member>
        <member name="M:Gobosh.DICOM.Reader.GetEncodingFromEncodingString(System.String)">
            <summary>
            Returns an Encoding Class Reference from System.Text.Encoding by translating
            the DICOM Character Set to the Registration Strings. The DICOM strings are
            defined in PS3.3-2006, Page 816, Table C.12-2
            The code strings for the Encoding object can be found here:
            http://msdn2.microsoft.com/de-de/library/system.text.encoding.aspx
            </summary>
            <param name="announcedEncoding">DICOM string for encoding</param>
            <returns>An Encoding Class</returns>
        </member>
        <member name="M:Gobosh.DICOM.Reader.isItemDelimitationItem">
            <summary>
            returns if the current Item is a delimitation item
            </summary>
            <returns>xx</returns>
        </member>
        <member name="T:Gobosh.DICOM.XMLReader">
            <summary>
            XMLReader is a class providing static functions to read
            the Gobosh.Dicom.XML format. All Read functions are returning
            a new Document object.
            </summary>
        </member>
        <member name="T:Gobosh.DICOM.XMLWriter">
            <summary>
            XMLReader is a class providing static functions to write
            the Gobosh.Dicom.XML format.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.XMLWriter.WriteToFile(System.String,Gobosh.DICOM.DataElement)">
            <summary>
            Writes a DICOM document to a file with a given filename
            </summary>
            <param name="filename">Name of the output file</param>
            <param name="rootNode">Reference to the root node of the DICOM document</param>
        </member>
        <member name="M:Gobosh.DICOM.XMLWriter.WriteToStream(System.IO.Stream,Gobosh.DICOM.DataElement)">
            <summary>
            Writes a DICOM document to a stream
            </summary>
            <param name="outStream">An output stream</param>
            <param name="rootNode">Reference to the root node of the DICOM document</param>
        </member>
        <member name="M:Gobosh.DICOM.XMLWriter.xmlAddAttribute(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds an attribute to a given node, using a given document
            </summary>
            <param name="xmlDoc">the document the node belongs to</param>
            <param name="node">the node that gets a new attribute</param>
            <param name="name">the name of the new attribute</param>
            <param name="value">the value of the new attribute</param>
        </member>
        <member name="M:Gobosh.DICOM.XMLWriter.export(System.Xml.XmlDocument,System.Xml.XmlNode,Gobosh.DICOM.DataElement,System.String,System.Int32@)">
            <summary>
            Exports a dataElement recursivly.
            </summary>
            <remarks>This function calls itself recursivly for each DICOM recursion.</remarks>
            <param name="xmlDoc">the document the node belongs to</param>
            <param name="node">the node that gets the new XML nodes</param>
            <param name="dataElement">the data element to be exported</param>
            <param name="xmlns">the namespace of the Gobosh.DICOM.Xml document</param>
        </member>
        <member name="T:Gobosh.DICOM.DataElement">
            <summary>
            The external accessor for the elements
            of a DICOM stream as well as the base class for a
            specific DataElement. It contains as primary collection
            type a collection of sub elements (SQ DataElements i.e.
            contain other DataElements).
            Additionally each DataElement contains a collection of values
            in the Values member variable. Despite some Data Elements have
            a VM (Value Multiplicity) of 1, they share all the same
            mechanism. Violations can be detected by checking against
            the DataDictionary which is referenced.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.#ctor">
            <summary>
            The standard DataElement constructor.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.#ctor(Gobosh.DICOM.DataDictionary,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],Gobosh.StringEncoding,System.Boolean)">
            <summary>
            The extended DataElement constructor. Already defines the group/element tag, the used valuerepresentation, etc.
            </summary>
            <param name="dataDictionary">A reference to the used data dictionary</param>
            <param name="groupTag">The group tag</param>
            <param name="elementTag">The element tag</param>
            <param name="valueRepresentation">The VR of the DataElement</param>
            <param name="valueLength">The Value Length</param>
            <param name="rawBuffer">byte[] Reference to the raw buffer</param>
            <param name="encodingUsed">The string encoding of the stream</param>
            <param name="isLittleEndian">raw buffer endianess</param>
        </member>
        <member name="T:Gobosh.DICOM.DataElement.DataState">
            <summary>
            DataState presents the lifecycle of a DataElement.
            Since encoding/decoding can be expensive it is only
            done on request.
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.IsInitialized">
            <summary>
            Flag true, if the DataElement has gone through Initialize()
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.GroupTag">
            <summary>
            The group tag
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.ElementTag">
            <summary>
            The Element tag
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.ValueRepresentation">
            <summary>
            The VR string as integer
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.ValueLength">
            <summary>
            The length of the RawBuffer (Value Length)
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.RawData">
            <summary>
            The reference to the raw data buffer
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.Parent">
            <summary>
            References to the parent element (needed for checks on Item Elements)
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.UsedDataDictionary">
            <summary>
            References to the currently used Data Dictionary
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.UsedEncoding">
            <summary>
            References to the used value encoding
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.IsLittleEndian">
            <summary>
            True, if RawBuffer be encoded little endian
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.Values">
            <summary>
            The values that are stored in the Data Element. Access is protected
            because the encoding state of the DataElement can interact with the
            contents or existence of the Values, therefore all access has to
            occur via member functions of the DataElement object.
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.Warnings">
            <summary>
            Any warnings that came up.
            </summary>
        </member>
        <member name="F:Gobosh.DICOM.DataElement.DataValueState">
            <summary>
            The current life cycle state
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.Initialize(Gobosh.DICOM.DataDictionary,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],Gobosh.StringEncoding,System.Boolean)">
            <summary>
            Assigns the given parameters to internal variables.
            </summary>
            <param name="dataDictionary">A reference to the used data dictionary</param>
            <param name="groupTag">The group tag</param>
            <param name="elementTag">The element tag</param>
            <param name="valueRepresentation">The VR of the DataElement</param>
            <param name="valueLength">The Value Length</param>
            <param name="rawBuffer">byte[] Reference to the raw buffer</param>
            <param name="encodingUsed">The string encoding of the stream</param>
            <param name="isLittleEndian">raw buffer endianess</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.AddWarning(System.Int32,System.String)">
            <summary>
            Adds a warning to the warnings list
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.PurgeRawData">
            <summary>
            Purges the Raw Data if present.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.PurgeValues">
            <summary>
            Purges all values if present.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.setRawData(System.Byte[],System.Int32)">
            <summary>
            Sets the raw Data buffer. If buffer is null, the data state
            is set to IsNotPresent. If you need to declare an Element with no
            Values, use the SetNoValues() function.
            </summary>
            <param name="buffer">A reference to a byte array</param>
            <param name="valuelength">the length of the value buffer</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.Swap(Gobosh.DICOM.DataElement,Gobosh.DICOM.DataElement)">
            <summary>
            Exchanges the existent Data Element node with a new one.
            </summary>
            <param name="existentChild">the element to be replaced</param>
            <param name="newChild">the element that replaces</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetChildByTag(System.Int32,System.Int32)">
            <summary>
            Get the Data Element child by group and element tag.
            Do not use this function to lookup Item Data Elements.
            </summary>
            <param name="group">The group tag of the Data Element to find</param>
            <param name="element">The element tag of the Data Element to find</param>
            <returns>A reference to the Data Element matching (group,element)</returns>
            <remarks>Shows undefined behaviour for Item DAs (like (fffe,e000), since there can be multiples</remarks>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetChildIndexByTag(System.Int32,System.Int32)">
            <summary>
            Get the Data Element child by group and element tag.
            Do not use this function to lookup Item Data Elements.
            </summary>
            <param name="group">The group tag of the Data Element to find</param>
            <param name="element">The element tag of the Data Element to find</param>
            <returns>A reference to the Data Element matching (group,element)</returns>
            <remarks>Shows undefined behaviour for Item DAs (like (fffe,e000), since there can be multiples</remarks>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.CallPrepareRawBuffer">
            <summary>
            This is the internal function to prepare the raw data buffer
            if the state of the data element indicates that no raw buffer
            presentation of the value(s) is present, it calls the
            function PrepareRawBuffer() which shall be overloaded by the
            descendants.
            </summary>
            <exception cref="T:System.Exception">Thrown when the index does not exist</exception>
            <exception cref="T:System.Exception">Thrown when the index does not exist</exception>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.PrepareRawBuffer">
            <summary>
            Overloaded for raw buffer preparation. Must set ValueLength!
            </summary>
            <remarks>Must set ValueLength member variable.</remarks>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetLength">
            <summary>
            Returns the length of the raw DataElement (override it in descendends).
            Will prepare the encoded raw buffer if not present!
            </summary>
            <returns>The length of the raw buffer</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetEncodedLength(System.Boolean)">
            <summary>
            Get the encoded Length of the DataElement by given VR syntax including the length of all sub elements in their payload, if present
            </summary>
            <remarks>Calling GetEncodedLength() can be expensive since it
            causes the values to be encoded to raw format to determine the
            length of the value payload.</remarks>
            <param name="isImplicit">true for implicit encoding</param>
            <returns>The number of bytes the completely encoded Element would take</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetEncodedLengthOfChildren(System.Boolean)">
            <summary>
            Get the encoded Length of all DataElement child nodes.
            </summary>
            <param name="isImplicit">true if implicit data encoding shall be used</param>
            <returns>the encoded length of all sub nodes</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetHeaderLen(System.Boolean)">
            <summary>
            Calculates the length of the header bytes of this value element (without the payload)
            </summary>
            <returns>The number of bytes that this element encodes (excluding the payload)</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.SetEndianess(System.Boolean)">
            <summary>
            Sets the endianess of the current node and its child nodes.
            Converts all data necessary to be converted. If the Data Element
            is part of MetaData Group 0x0002, it is set to littleEndian despite
            the value of isLittleEndian.
            </summary>
            <param name="isLittleEndian">if the node shall be little endian</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.IsUndefinedLength">
            <summary>
            Returns true when the ValueLength is -1 (= undefined length)
            </summary>
            <returns>true, when ValueLength = -1</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.WriteToByteArray(System.Boolean,System.Boolean)">
            <summary>
            Creates a byte array and stores itself as DICOM DataElement
            using the Data Dictionary.
            The method is part of the export to stream mechanism.
            </summary>
            <param name="isLittleEndian">if the Data Element should be encoded in little endian</param>
            <param name="isImplicit">if the Data Element should use implicit VRs</param>
            <returns>a new byte[] array</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.Decode(System.Boolean)">
            <summary>
            Decodes the RawData buffer using the given endianess.
            Overwrite this function to acchieve real decoding
            </summary>
            <example>public virtual void Decode(bool isLittleEndian)
            {
            PurgeValues();
            PrepareForAddValue();
            ; *** decode *** and AddValue()
            DataValueState = DataState.IsRawAndDecoded;
            }
            </example>
            <param name="isLittleEndian">flag if data is little endian</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.CreateValueElement(System.String)">
            <summary>
            A overridable factory function to create the appropriate Value
            Element objects.
            </summary>
            <param name="Value">A string representing the value</param>
            <returns>an Value Element object</returns>
            <remarks>The function can return null, in this case,
            no element could be created. Example is an IS DataElement
            with ValueLength of 0.</remarks>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.CreateValueElement">
            <summary>
            An overridable factory function to create the appropriate
            Value Element object used as Value in this DataElement.
            Use this function to create an default Value object and
            access the properties to change it.
            </summary>
            <returns>A default Value Element object</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetHumanReadableString">
            <summary>
            Returns a string that shows the content of the DataElement in
            an human readable manner.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.SetValue(System.String)">
            <summary>
            Sets a single Value (VM will be 1 afterwards)
            </summary>
            <param name="Value">A string representing the value</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.SetNoValues">
            <summary>
            Sets the Data Element object to RawAndDecoded data
            state to prevent false data states during interpretation.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.SetRawAndDecodedState">
            <summary>
            Sets the Data Element to RawAndDecoded state
            by as well creating decoded values and rawdata.
            It does NOT just set the state flags.
            This function can be used to prepare the full
            working set to minimize unexpected performance loss
            during accessing value and or import/export functions
            The function does also call all its child nodes,
            so a call to the root node creates a fully expanded
            node tree.
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.SetValue(System.Int32,System.String)">
            <summary>
            Sets a single Value at a certain Index
            </summary>
            <param name="index">The index where the value should be stored</param>
            <param name="Value">A string representing the value</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.PrepareForAddValue">
            <summary>
            Prepares the addition of values or the translation. Does not change the DataValueState
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.DoAddValue(System.String)">
            <summary>
            Adds a single object to the values without modifying the DataState. Use this during encoding/decoding.
            </summary>
            <param name="Value">A string representing the value</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.AddValue(System.String)">
            <summary>
            Adds a single value to the values list
            </summary>
            <param name="Value">A string representing the value</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.ClearValues">
            <summary>
            Clears all values and also raw buffers, call it
            as preparation before calling AddValue
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetValue">
            <summary>
            Gets the only first value, usually this shouldn't be used!
            </summary>
            <returns>The object of the first value</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetValue(System.Int32)">
            <summary>
            Gets the value from a given index.
            </summary>
            <param name="index">The index from where the value should be retrieved from</param>
            <returns>The object at the current place</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetValueCount">
            <summary>
            Get the number of values. This function triggers decoding of the raw buffer if neccessary, therefore it is not a cheap function.
            </summary>
            <returns>The number of (decoded) values</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.Add(Gobosh.DICOM.DataElement)">
            <summary>
            Adds a DataElement Object to the current List
            </summary>
            <param name="aDataElement">a reference to the new DataElement child object</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.Remove(Gobosh.DICOM.DataElement)">
            <summary>
            Removes an item from the current List
            </summary>
            <param name="Element">The reference to an DataElement object</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.Remove(System.Int32)">
            <summary>
            Removes an items from the current LIst
            </summary>
            <param name="Index">the index at which an object should be removed</param>
            <exception cref="T:System.Exception">Thrown when the index does not exist</exception>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.Item(System.Int32)">
            <summary>
            Retrieves an Item at a certain index
            </summary>
            <param name="Index">the index from where the object should be returned</param>
            <returns>
            </returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetDescription">
            <summary>
            Generates a human readable description of the DataElement including
            the tag, the vr as well as a size and the description from the data dictionary
            </summary>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetDataDictionary">
            <summary>
            Get the currently used Data Dictionary
            </summary>
            <returns>a reference to a DataDictionary object</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.SetDataDictionary(Gobosh.DICOM.DataDictionary)">
            <summary>
            Populates the dictionary to be used to the node and all child nodes.
            </summary>
            <param name="dictionary">a reference to the used dictionary</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.RemoveDataElements(System.Int32,System.Int32)">
            <summary>
            Remove all DataElements that match (group,element).
            The function does work recursive into the subtree
            </summary>
            <param name="group">The group tag</param>
            <param name="element">The element tag</param>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.GetTagDescription">
            <summary>
            Gets a human readable description for an element by using the current Data Dictionary
            </summary>
            <returns>human readable string</returns>
        </member>
        <member name="M:Gobosh.DICOM.DataElement.isImageData">
            <summary>
            Returns true if the element could be Image Data
            </summary>
            <returns>true, when Data Element could be Image Data</returns>
        </member>
        <member name="T:Gobosh.Utils">
            <summary>
            The Utils class provides several static functions to read and write distinct data types
            from a stream in a given endianess.
            </summary>
        </member>
        <member name="M:Gobosh.Utils.ReadInt16(System.Byte[],System.Int64,System.Boolean)">
            <summary>
            read an 16bit signed integer from a buffer
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <param name="isLittleEndian">wether to read it little endian or big endian</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.ReadInt32(System.Byte[],System.Int64,System.Boolean)">
            <summary>
            read an 32 bit signed integer from a buffer
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <param name="isLittleEndian">wether to read it little endian or big endian</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.ReadInt16BigEndian(System.Byte[],System.Int64)">
            <summary>
            Reads a signed 16 bit int Big Endian encoded
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.WriteInt16BigEndian(System.Int32,System.Byte[],System.Int64)">
            <summary>
            Writes a signed 16 bit int Big Endian encoded
            </summary>
            <param name="value">
            </param>
            <param name="buffer">
            </param>
            <param name="index">
            </param>
        </member>
        <member name="M:Gobosh.Utils.ReadInt16LittleEndian(System.Byte[],System.Int64)">
            <summary>
            Reads a signed 16 bit int Little Endian encoded
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.WriteInt16(System.Int32,System.Byte[],System.Int64,System.Boolean)">
            <summary>
            Writes a signed 16 bit int
            </summary>
            <param name="value">the value to write</param>
            <param name="buffer">the target byte buffer</param>
            <param name="index">the index where to write</param>
            <param name="isLittleEndian">true if the value should be written in little endian</param>
        </member>
        <member name="M:Gobosh.Utils.WriteInt16LittleEndian(System.Int32,System.Byte[],System.Int64)">
            <summary>
            Writes a signed 16 bit int Little Endian encoded
            </summary>
            <param name="value">
            </param>
            <param name="buffer">
            </param>
            <param name="index">
            </param>
        </member>
        <member name="M:Gobosh.Utils.ReadInt32LittleEndian(System.Byte[],System.Int64)">
            <summary>
            Reads a signed Int32 Little Endian
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.WriteInt32LittleEndian(System.Int32,System.Byte[],System.Int64)">
            <summary>
            Writes a signed Int32 Little Endian
            </summary>
            <param name="value">The value to be written</param>
            <param name="buffer">The buffer where to write to</param>
            <param name="index">The index in the buffer where to write to</param>
        </member>
        <member name="M:Gobosh.Utils.ReadInt32BigEndian(System.Byte[],System.Int64)">
            <summary>
            Reads a signed Int32 Big Endian
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.WriteInt32BigEndian(System.Int32,System.Byte[],System.Int64)">
            <summary>
            Writes a signed Int32 Big Endian
            </summary>
            <param name="value">The value to be written</param>
            <param name="buffer">The buffer where to write to</param>
            <param name="index">The index in the buffer where to write to</param>
        </member>
        <member name="M:Gobosh.Utils.ReadUInt16BigEndian(System.Byte[],System.Int64)">
            <summary>
            Reads a signed 16 bit int Big Endian encoded
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.ReadUInt16LittleEndian(System.Byte[],System.Int64)">
            <summary>
            Reads a signed 16 bit int Little Endian encoded
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.ReadUInt32LittleEndian(System.Byte[],System.Int64)">
            <summary>
            Reads a unsigned Int32 Little Endian
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.ReadUInt32BigEndian(System.Byte[],System.Int64)">
            <summary>
            Reads an unsigned Int32 Big Endian
            </summary>
            <param name="buffer">the byte buffer from where to read</param>
            <param name="index">the index of the first byte of the encoded value</param>
            <returns>the value in native endianess</returns>
        </member>
        <member name="M:Gobosh.Utils.CheckBounds(System.Int32,System.Int32,System.Int32)">
            <summary>
            returns true if Value is within [Lower,Higher].
            </summary>
            <param name="Value">The value to check</param>
            <param name="LowerBoundary">The lower including boundary</param>
            <param name="HigherBoundary">The upper including boundary</param>
            <returns>True, if value is in [Lower,Higher]</returns>
        </member>
        <member name="M:Gobosh.Utils.DecodeString(System.Byte[],System.Int32,Gobosh.StringEncoding)">
            <summary>
            Decodes a byte array with given encoding
            </summary>
            <param name="buffer">the byte buffer</param>
            <param name="size">size of the string</param>
            <param name="encoding">the encoding of the string in the buffer</param>
            <returns>the decoded native string</returns>
        </member>
    </members>
</doc>
